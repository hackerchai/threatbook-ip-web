// Code generated by ent, DO NOT EDIT.

package threat

import (
	"entgo.io/ent/dialect/sql"
	"github.com/hackerchai/threatbook-ip-web/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// ThreatIDInfo applies equality check predicate on the "threat_id_info" field. It's identical to ThreatIDInfoEQ.
func ThreatIDInfo(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThreatIDInfo), v))
	})
}

// DomainCount applies equality check predicate on the "domain_count" field. It's identical to DomainCountEQ.
func DomainCount(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainCount), v))
	})
}

// TagCount applies equality check predicate on the "tag_count" field. It's identical to TagCountEQ.
func TagCount(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTagCount), v))
	})
}

// ItelCount applies equality check predicate on the "itel_count" field. It's identical to ItelCountEQ.
func ItelCount(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItelCount), v))
	})
}

// Judge applies equality check predicate on the "judge" field. It's identical to JudgeEQ.
func Judge(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudge), v))
	})
}

// Poc applies equality check predicate on the "poc" field. It's identical to PocEQ.
func Poc(v bool) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoc), v))
	})
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v int64) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// ThreatIDInfoEQ applies the EQ predicate on the "threat_id_info" field.
func ThreatIDInfoEQ(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoNEQ applies the NEQ predicate on the "threat_id_info" field.
func ThreatIDInfoNEQ(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoIn applies the In predicate on the "threat_id_info" field.
func ThreatIDInfoIn(vs ...string) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThreatIDInfo), v...))
	})
}

// ThreatIDInfoNotIn applies the NotIn predicate on the "threat_id_info" field.
func ThreatIDInfoNotIn(vs ...string) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThreatIDInfo), v...))
	})
}

// ThreatIDInfoGT applies the GT predicate on the "threat_id_info" field.
func ThreatIDInfoGT(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoGTE applies the GTE predicate on the "threat_id_info" field.
func ThreatIDInfoGTE(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoLT applies the LT predicate on the "threat_id_info" field.
func ThreatIDInfoLT(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoLTE applies the LTE predicate on the "threat_id_info" field.
func ThreatIDInfoLTE(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoContains applies the Contains predicate on the "threat_id_info" field.
func ThreatIDInfoContains(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoHasPrefix applies the HasPrefix predicate on the "threat_id_info" field.
func ThreatIDInfoHasPrefix(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoHasSuffix applies the HasSuffix predicate on the "threat_id_info" field.
func ThreatIDInfoHasSuffix(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoEqualFold applies the EqualFold predicate on the "threat_id_info" field.
func ThreatIDInfoEqualFold(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThreatIDInfo), v))
	})
}

// ThreatIDInfoContainsFold applies the ContainsFold predicate on the "threat_id_info" field.
func ThreatIDInfoContainsFold(v string) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThreatIDInfo), v))
	})
}

// DomainCountEQ applies the EQ predicate on the "domain_count" field.
func DomainCountEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainCount), v))
	})
}

// DomainCountNEQ applies the NEQ predicate on the "domain_count" field.
func DomainCountNEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomainCount), v))
	})
}

// DomainCountIn applies the In predicate on the "domain_count" field.
func DomainCountIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDomainCount), v...))
	})
}

// DomainCountNotIn applies the NotIn predicate on the "domain_count" field.
func DomainCountNotIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDomainCount), v...))
	})
}

// DomainCountGT applies the GT predicate on the "domain_count" field.
func DomainCountGT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomainCount), v))
	})
}

// DomainCountGTE applies the GTE predicate on the "domain_count" field.
func DomainCountGTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomainCount), v))
	})
}

// DomainCountLT applies the LT predicate on the "domain_count" field.
func DomainCountLT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomainCount), v))
	})
}

// DomainCountLTE applies the LTE predicate on the "domain_count" field.
func DomainCountLTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomainCount), v))
	})
}

// TagCountEQ applies the EQ predicate on the "tag_count" field.
func TagCountEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTagCount), v))
	})
}

// TagCountNEQ applies the NEQ predicate on the "tag_count" field.
func TagCountNEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTagCount), v))
	})
}

// TagCountIn applies the In predicate on the "tag_count" field.
func TagCountIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTagCount), v...))
	})
}

// TagCountNotIn applies the NotIn predicate on the "tag_count" field.
func TagCountNotIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTagCount), v...))
	})
}

// TagCountGT applies the GT predicate on the "tag_count" field.
func TagCountGT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTagCount), v))
	})
}

// TagCountGTE applies the GTE predicate on the "tag_count" field.
func TagCountGTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTagCount), v))
	})
}

// TagCountLT applies the LT predicate on the "tag_count" field.
func TagCountLT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTagCount), v))
	})
}

// TagCountLTE applies the LTE predicate on the "tag_count" field.
func TagCountLTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTagCount), v))
	})
}

// ItelCountEQ applies the EQ predicate on the "itel_count" field.
func ItelCountEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItelCount), v))
	})
}

// ItelCountNEQ applies the NEQ predicate on the "itel_count" field.
func ItelCountNEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItelCount), v))
	})
}

// ItelCountIn applies the In predicate on the "itel_count" field.
func ItelCountIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItelCount), v...))
	})
}

// ItelCountNotIn applies the NotIn predicate on the "itel_count" field.
func ItelCountNotIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItelCount), v...))
	})
}

// ItelCountGT applies the GT predicate on the "itel_count" field.
func ItelCountGT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItelCount), v))
	})
}

// ItelCountGTE applies the GTE predicate on the "itel_count" field.
func ItelCountGTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItelCount), v))
	})
}

// ItelCountLT applies the LT predicate on the "itel_count" field.
func ItelCountLT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItelCount), v))
	})
}

// ItelCountLTE applies the LTE predicate on the "itel_count" field.
func ItelCountLTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItelCount), v))
	})
}

// JudgeEQ applies the EQ predicate on the "judge" field.
func JudgeEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJudge), v))
	})
}

// JudgeNEQ applies the NEQ predicate on the "judge" field.
func JudgeNEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJudge), v))
	})
}

// JudgeIn applies the In predicate on the "judge" field.
func JudgeIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJudge), v...))
	})
}

// JudgeNotIn applies the NotIn predicate on the "judge" field.
func JudgeNotIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJudge), v...))
	})
}

// JudgeGT applies the GT predicate on the "judge" field.
func JudgeGT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJudge), v))
	})
}

// JudgeGTE applies the GTE predicate on the "judge" field.
func JudgeGTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJudge), v))
	})
}

// JudgeLT applies the LT predicate on the "judge" field.
func JudgeLT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJudge), v))
	})
}

// JudgeLTE applies the LTE predicate on the "judge" field.
func JudgeLTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJudge), v))
	})
}

// PocEQ applies the EQ predicate on the "poc" field.
func PocEQ(v bool) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoc), v))
	})
}

// PocNEQ applies the NEQ predicate on the "poc" field.
func PocNEQ(v bool) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoc), v))
	})
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...int) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSource), v))
	})
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSource), v))
	})
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSource), v))
	})
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v int) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSource), v))
	})
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v int64) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v int64) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCtime), v))
	})
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...int64) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCtime), v...))
	})
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...int64) predicate.Threat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Threat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCtime), v...))
	})
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v int64) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCtime), v))
	})
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v int64) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCtime), v))
	})
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v int64) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCtime), v))
	})
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v int64) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCtime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Threat) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Threat) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Threat) predicate.Threat {
	return predicate.Threat(func(s *sql.Selector) {
		p(s.Not())
	})
}
