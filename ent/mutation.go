// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/hackerchai/threatbook-ip-web/ent/predicate"
	"github.com/hackerchai/threatbook-ip-web/ent/threat"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeThreat = "Threat"
)

// ThreatMutation represents an operation that mutates the Threat nodes in the graph.
type ThreatMutation struct {
	config
	op              Op
	typ             string
	id              *int
	ip              *string
	threat_id_info  *string
	domain_count    *int
	adddomain_count *int
	tag_count       *int
	addtag_count    *int
	itel_count      *int
	additel_count   *int
	judge           *int
	addjudge        *int
	poc             *bool
	source          *int
	addsource       *int
	ctime           *int64
	addctime        *int64
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Threat, error)
	predicates      []predicate.Threat
}

var _ ent.Mutation = (*ThreatMutation)(nil)

// threatOption allows management of the mutation configuration using functional options.
type threatOption func(*ThreatMutation)

// newThreatMutation creates new mutation for the Threat entity.
func newThreatMutation(c config, op Op, opts ...threatOption) *ThreatMutation {
	m := &ThreatMutation{
		config:        c,
		op:            op,
		typ:           TypeThreat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withThreatID sets the ID field of the mutation.
func withThreatID(id int) threatOption {
	return func(m *ThreatMutation) {
		var (
			err   error
			once  sync.Once
			value *Threat
		)
		m.oldValue = func(ctx context.Context) (*Threat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Threat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withThreat sets the old Threat of the mutation.
func withThreat(node *Threat) threatOption {
	return func(m *ThreatMutation) {
		m.oldValue = func(context.Context) (*Threat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ThreatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ThreatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Threat entities.
func (m *ThreatMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ThreatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ThreatMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Threat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIP sets the "ip" field.
func (m *ThreatMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *ThreatMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *ThreatMutation) ResetIP() {
	m.ip = nil
}

// SetThreatIDInfo sets the "threat_id_info" field.
func (m *ThreatMutation) SetThreatIDInfo(s string) {
	m.threat_id_info = &s
}

// ThreatIDInfo returns the value of the "threat_id_info" field in the mutation.
func (m *ThreatMutation) ThreatIDInfo() (r string, exists bool) {
	v := m.threat_id_info
	if v == nil {
		return
	}
	return *v, true
}

// OldThreatIDInfo returns the old "threat_id_info" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldThreatIDInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThreatIDInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThreatIDInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThreatIDInfo: %w", err)
	}
	return oldValue.ThreatIDInfo, nil
}

// ResetThreatIDInfo resets all changes to the "threat_id_info" field.
func (m *ThreatMutation) ResetThreatIDInfo() {
	m.threat_id_info = nil
}

// SetDomainCount sets the "domain_count" field.
func (m *ThreatMutation) SetDomainCount(i int) {
	m.domain_count = &i
	m.adddomain_count = nil
}

// DomainCount returns the value of the "domain_count" field in the mutation.
func (m *ThreatMutation) DomainCount() (r int, exists bool) {
	v := m.domain_count
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainCount returns the old "domain_count" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldDomainCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainCount: %w", err)
	}
	return oldValue.DomainCount, nil
}

// AddDomainCount adds i to the "domain_count" field.
func (m *ThreatMutation) AddDomainCount(i int) {
	if m.adddomain_count != nil {
		*m.adddomain_count += i
	} else {
		m.adddomain_count = &i
	}
}

// AddedDomainCount returns the value that was added to the "domain_count" field in this mutation.
func (m *ThreatMutation) AddedDomainCount() (r int, exists bool) {
	v := m.adddomain_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetDomainCount resets all changes to the "domain_count" field.
func (m *ThreatMutation) ResetDomainCount() {
	m.domain_count = nil
	m.adddomain_count = nil
}

// SetTagCount sets the "tag_count" field.
func (m *ThreatMutation) SetTagCount(i int) {
	m.tag_count = &i
	m.addtag_count = nil
}

// TagCount returns the value of the "tag_count" field in the mutation.
func (m *ThreatMutation) TagCount() (r int, exists bool) {
	v := m.tag_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTagCount returns the old "tag_count" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldTagCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTagCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTagCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTagCount: %w", err)
	}
	return oldValue.TagCount, nil
}

// AddTagCount adds i to the "tag_count" field.
func (m *ThreatMutation) AddTagCount(i int) {
	if m.addtag_count != nil {
		*m.addtag_count += i
	} else {
		m.addtag_count = &i
	}
}

// AddedTagCount returns the value that was added to the "tag_count" field in this mutation.
func (m *ThreatMutation) AddedTagCount() (r int, exists bool) {
	v := m.addtag_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetTagCount resets all changes to the "tag_count" field.
func (m *ThreatMutation) ResetTagCount() {
	m.tag_count = nil
	m.addtag_count = nil
}

// SetItelCount sets the "itel_count" field.
func (m *ThreatMutation) SetItelCount(i int) {
	m.itel_count = &i
	m.additel_count = nil
}

// ItelCount returns the value of the "itel_count" field in the mutation.
func (m *ThreatMutation) ItelCount() (r int, exists bool) {
	v := m.itel_count
	if v == nil {
		return
	}
	return *v, true
}

// OldItelCount returns the old "itel_count" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldItelCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItelCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItelCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItelCount: %w", err)
	}
	return oldValue.ItelCount, nil
}

// AddItelCount adds i to the "itel_count" field.
func (m *ThreatMutation) AddItelCount(i int) {
	if m.additel_count != nil {
		*m.additel_count += i
	} else {
		m.additel_count = &i
	}
}

// AddedItelCount returns the value that was added to the "itel_count" field in this mutation.
func (m *ThreatMutation) AddedItelCount() (r int, exists bool) {
	v := m.additel_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetItelCount resets all changes to the "itel_count" field.
func (m *ThreatMutation) ResetItelCount() {
	m.itel_count = nil
	m.additel_count = nil
}

// SetJudge sets the "judge" field.
func (m *ThreatMutation) SetJudge(i int) {
	m.judge = &i
	m.addjudge = nil
}

// Judge returns the value of the "judge" field in the mutation.
func (m *ThreatMutation) Judge() (r int, exists bool) {
	v := m.judge
	if v == nil {
		return
	}
	return *v, true
}

// OldJudge returns the old "judge" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldJudge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJudge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJudge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJudge: %w", err)
	}
	return oldValue.Judge, nil
}

// AddJudge adds i to the "judge" field.
func (m *ThreatMutation) AddJudge(i int) {
	if m.addjudge != nil {
		*m.addjudge += i
	} else {
		m.addjudge = &i
	}
}

// AddedJudge returns the value that was added to the "judge" field in this mutation.
func (m *ThreatMutation) AddedJudge() (r int, exists bool) {
	v := m.addjudge
	if v == nil {
		return
	}
	return *v, true
}

// ResetJudge resets all changes to the "judge" field.
func (m *ThreatMutation) ResetJudge() {
	m.judge = nil
	m.addjudge = nil
}

// SetPoc sets the "poc" field.
func (m *ThreatMutation) SetPoc(b bool) {
	m.poc = &b
}

// Poc returns the value of the "poc" field in the mutation.
func (m *ThreatMutation) Poc() (r bool, exists bool) {
	v := m.poc
	if v == nil {
		return
	}
	return *v, true
}

// OldPoc returns the old "poc" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldPoc(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoc: %w", err)
	}
	return oldValue.Poc, nil
}

// ResetPoc resets all changes to the "poc" field.
func (m *ThreatMutation) ResetPoc() {
	m.poc = nil
}

// SetSource sets the "source" field.
func (m *ThreatMutation) SetSource(i int) {
	m.source = &i
	m.addsource = nil
}

// Source returns the value of the "source" field in the mutation.
func (m *ThreatMutation) Source() (r int, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldSource(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// AddSource adds i to the "source" field.
func (m *ThreatMutation) AddSource(i int) {
	if m.addsource != nil {
		*m.addsource += i
	} else {
		m.addsource = &i
	}
}

// AddedSource returns the value that was added to the "source" field in this mutation.
func (m *ThreatMutation) AddedSource() (r int, exists bool) {
	v := m.addsource
	if v == nil {
		return
	}
	return *v, true
}

// ResetSource resets all changes to the "source" field.
func (m *ThreatMutation) ResetSource() {
	m.source = nil
	m.addsource = nil
}

// SetCtime sets the "ctime" field.
func (m *ThreatMutation) SetCtime(i int64) {
	m.ctime = &i
	m.addctime = nil
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *ThreatMutation) Ctime() (r int64, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the Threat entity.
// If the Threat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThreatMutation) OldCtime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// AddCtime adds i to the "ctime" field.
func (m *ThreatMutation) AddCtime(i int64) {
	if m.addctime != nil {
		*m.addctime += i
	} else {
		m.addctime = &i
	}
}

// AddedCtime returns the value that was added to the "ctime" field in this mutation.
func (m *ThreatMutation) AddedCtime() (r int64, exists bool) {
	v := m.addctime
	if v == nil {
		return
	}
	return *v, true
}

// ResetCtime resets all changes to the "ctime" field.
func (m *ThreatMutation) ResetCtime() {
	m.ctime = nil
	m.addctime = nil
}

// Where appends a list predicates to the ThreatMutation builder.
func (m *ThreatMutation) Where(ps ...predicate.Threat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ThreatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Threat).
func (m *ThreatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ThreatMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.ip != nil {
		fields = append(fields, threat.FieldIP)
	}
	if m.threat_id_info != nil {
		fields = append(fields, threat.FieldThreatIDInfo)
	}
	if m.domain_count != nil {
		fields = append(fields, threat.FieldDomainCount)
	}
	if m.tag_count != nil {
		fields = append(fields, threat.FieldTagCount)
	}
	if m.itel_count != nil {
		fields = append(fields, threat.FieldItelCount)
	}
	if m.judge != nil {
		fields = append(fields, threat.FieldJudge)
	}
	if m.poc != nil {
		fields = append(fields, threat.FieldPoc)
	}
	if m.source != nil {
		fields = append(fields, threat.FieldSource)
	}
	if m.ctime != nil {
		fields = append(fields, threat.FieldCtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ThreatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case threat.FieldIP:
		return m.IP()
	case threat.FieldThreatIDInfo:
		return m.ThreatIDInfo()
	case threat.FieldDomainCount:
		return m.DomainCount()
	case threat.FieldTagCount:
		return m.TagCount()
	case threat.FieldItelCount:
		return m.ItelCount()
	case threat.FieldJudge:
		return m.Judge()
	case threat.FieldPoc:
		return m.Poc()
	case threat.FieldSource:
		return m.Source()
	case threat.FieldCtime:
		return m.Ctime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ThreatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case threat.FieldIP:
		return m.OldIP(ctx)
	case threat.FieldThreatIDInfo:
		return m.OldThreatIDInfo(ctx)
	case threat.FieldDomainCount:
		return m.OldDomainCount(ctx)
	case threat.FieldTagCount:
		return m.OldTagCount(ctx)
	case threat.FieldItelCount:
		return m.OldItelCount(ctx)
	case threat.FieldJudge:
		return m.OldJudge(ctx)
	case threat.FieldPoc:
		return m.OldPoc(ctx)
	case threat.FieldSource:
		return m.OldSource(ctx)
	case threat.FieldCtime:
		return m.OldCtime(ctx)
	}
	return nil, fmt.Errorf("unknown Threat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThreatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case threat.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case threat.FieldThreatIDInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThreatIDInfo(v)
		return nil
	case threat.FieldDomainCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainCount(v)
		return nil
	case threat.FieldTagCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTagCount(v)
		return nil
	case threat.FieldItelCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItelCount(v)
		return nil
	case threat.FieldJudge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJudge(v)
		return nil
	case threat.FieldPoc:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoc(v)
		return nil
	case threat.FieldSource:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case threat.FieldCtime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	}
	return fmt.Errorf("unknown Threat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ThreatMutation) AddedFields() []string {
	var fields []string
	if m.adddomain_count != nil {
		fields = append(fields, threat.FieldDomainCount)
	}
	if m.addtag_count != nil {
		fields = append(fields, threat.FieldTagCount)
	}
	if m.additel_count != nil {
		fields = append(fields, threat.FieldItelCount)
	}
	if m.addjudge != nil {
		fields = append(fields, threat.FieldJudge)
	}
	if m.addsource != nil {
		fields = append(fields, threat.FieldSource)
	}
	if m.addctime != nil {
		fields = append(fields, threat.FieldCtime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ThreatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case threat.FieldDomainCount:
		return m.AddedDomainCount()
	case threat.FieldTagCount:
		return m.AddedTagCount()
	case threat.FieldItelCount:
		return m.AddedItelCount()
	case threat.FieldJudge:
		return m.AddedJudge()
	case threat.FieldSource:
		return m.AddedSource()
	case threat.FieldCtime:
		return m.AddedCtime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThreatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case threat.FieldDomainCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDomainCount(v)
		return nil
	case threat.FieldTagCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTagCount(v)
		return nil
	case threat.FieldItelCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddItelCount(v)
		return nil
	case threat.FieldJudge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJudge(v)
		return nil
	case threat.FieldSource:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSource(v)
		return nil
	case threat.FieldCtime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCtime(v)
		return nil
	}
	return fmt.Errorf("unknown Threat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ThreatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ThreatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ThreatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Threat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ThreatMutation) ResetField(name string) error {
	switch name {
	case threat.FieldIP:
		m.ResetIP()
		return nil
	case threat.FieldThreatIDInfo:
		m.ResetThreatIDInfo()
		return nil
	case threat.FieldDomainCount:
		m.ResetDomainCount()
		return nil
	case threat.FieldTagCount:
		m.ResetTagCount()
		return nil
	case threat.FieldItelCount:
		m.ResetItelCount()
		return nil
	case threat.FieldJudge:
		m.ResetJudge()
		return nil
	case threat.FieldPoc:
		m.ResetPoc()
		return nil
	case threat.FieldSource:
		m.ResetSource()
		return nil
	case threat.FieldCtime:
		m.ResetCtime()
		return nil
	}
	return fmt.Errorf("unknown Threat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ThreatMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ThreatMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ThreatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ThreatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ThreatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ThreatMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ThreatMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Threat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ThreatMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Threat edge %s", name)
}
