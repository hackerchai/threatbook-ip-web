// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/hackerchai/threatbook-ip-web/ent/threat"
)

// Threat is the model entity for the Threat schema.
type Threat struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// ThreatIDInfo holds the value of the "threat_id_info" field.
	ThreatIDInfo string `json:"threat_id_info,omitempty"`
	// DomainCount holds the value of the "domain_count" field.
	DomainCount int `json:"domain_count,omitempty"`
	// TagCount holds the value of the "tag_count" field.
	TagCount int `json:"tag_count,omitempty"`
	// ItelCount holds the value of the "itel_count" field.
	ItelCount int `json:"itel_count,omitempty"`
	// Judge holds the value of the "judge" field.
	Judge int `json:"judge,omitempty"`
	// Poc holds the value of the "poc" field.
	Poc bool `json:"poc,omitempty"`
	// Source holds the value of the "source" field.
	Source int `json:"source,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime int64 `json:"ctime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Threat) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case threat.FieldPoc:
			values[i] = new(sql.NullBool)
		case threat.FieldID, threat.FieldDomainCount, threat.FieldTagCount, threat.FieldItelCount, threat.FieldJudge, threat.FieldSource, threat.FieldCtime:
			values[i] = new(sql.NullInt64)
		case threat.FieldIP, threat.FieldThreatIDInfo:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Threat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Threat fields.
func (t *Threat) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case threat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case threat.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				t.IP = value.String
			}
		case threat.FieldThreatIDInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field threat_id_info", values[i])
			} else if value.Valid {
				t.ThreatIDInfo = value.String
			}
		case threat.FieldDomainCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field domain_count", values[i])
			} else if value.Valid {
				t.DomainCount = int(value.Int64)
			}
		case threat.FieldTagCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tag_count", values[i])
			} else if value.Valid {
				t.TagCount = int(value.Int64)
			}
		case threat.FieldItelCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field itel_count", values[i])
			} else if value.Valid {
				t.ItelCount = int(value.Int64)
			}
		case threat.FieldJudge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field judge", values[i])
			} else if value.Valid {
				t.Judge = int(value.Int64)
			}
		case threat.FieldPoc:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field poc", values[i])
			} else if value.Valid {
				t.Poc = value.Bool
			}
		case threat.FieldSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				t.Source = int(value.Int64)
			}
		case threat.FieldCtime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				t.Ctime = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Threat.
// Note that you need to call Threat.Unwrap() before calling this method if this Threat
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Threat) Update() *ThreatUpdateOne {
	return (&ThreatClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Threat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Threat) Unwrap() *Threat {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Threat is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Threat) String() string {
	var builder strings.Builder
	builder.WriteString("Threat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("ip=")
	builder.WriteString(t.IP)
	builder.WriteString(", ")
	builder.WriteString("threat_id_info=")
	builder.WriteString(t.ThreatIDInfo)
	builder.WriteString(", ")
	builder.WriteString("domain_count=")
	builder.WriteString(fmt.Sprintf("%v", t.DomainCount))
	builder.WriteString(", ")
	builder.WriteString("tag_count=")
	builder.WriteString(fmt.Sprintf("%v", t.TagCount))
	builder.WriteString(", ")
	builder.WriteString("itel_count=")
	builder.WriteString(fmt.Sprintf("%v", t.ItelCount))
	builder.WriteString(", ")
	builder.WriteString("judge=")
	builder.WriteString(fmt.Sprintf("%v", t.Judge))
	builder.WriteString(", ")
	builder.WriteString("poc=")
	builder.WriteString(fmt.Sprintf("%v", t.Poc))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", t.Source))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(fmt.Sprintf("%v", t.Ctime))
	builder.WriteByte(')')
	return builder.String()
}

// Threats is a parsable slice of Threat.
type Threats []*Threat

func (t Threats) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
